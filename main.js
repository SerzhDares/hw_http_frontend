(()=>{"use strict";class t{constructor(){this.url="https://hw-http-backend.onrender.com/?method="}list(t){fetch(this.url+"allTickets").then((t=>t.json())).then((e=>{t(e)}))}get(t,e){fetch(this.url+`ticketById&id=${t}`).then((()=>{e()}))}create(t,e){fetch(this.url+"createTicket",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((t=>t.json())).then((t=>{e(t)}))}update(t,e,i){fetch(this.url+`updateById&id=${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((t=>t.json())).then((e=>{i(t,e)}))}delete(t,e){fetch(this.url+`deleteById&id=${t}`).then((()=>{e()}))}}class e{ticketMarking(t,e,i,c,s){return s?`<div class="ticket" id=${t}>\n                <input type="checkbox" class="ticket_status" checked>\n                <div class="ticket_text">\n                  <span class="ticket_name">${e}</span>\n                  <p class="ticket_description description_visible">${i}</p>\n                </div>\n                <div class="ticket_date_buttons">\n                  <span class="ticket_date">${c}</span>\n                  <button class="ticket_edit_button">Изменить</button>\n                  <button class="ticket_delete_button">Удалить</button>\n              </div>`:`<div class="ticket" id=${t}>\n                <input type="checkbox" class="ticket_status">\n                <div class="ticket_text">\n                    <span class="ticket_name">${e}</span>\n                    <p class="ticket_description description_visible">${i}</p>\n                </div>\n                <div class="ticket_date_buttons">\n                  <span class="ticket_date">${c}</span>\n                  <button class="ticket_edit_button">Изменить</button>\n                  <button class="ticket_delete_button">Удалить</button>\n              </div>`}}const i=document.querySelector(".tickets_container");new class{constructor(e){if(!(e instanceof HTMLElement))throw new Error("This is not HTML element!");this.ticketService=new t,this.addTicketForm=document.querySelector(".add_ticket_form"),this.updateTicketForm=document.querySelector(".update_ticket_form"),this.viewNewTicket=this.viewNewTicket.bind(this)}init(){this.ticketService.list(this.viewTickets),this.updateAllTickets(),this.deleteAllTickets(),this.changeAllTicketsStatus(),this.getAllTicketsDescription(),this.newTicketForm()}viewTickets(t){t.forEach((t=>{document.querySelector(".tickets_container").insertAdjacentHTML("beforeend",(new e).ticketMarking(t.id,t.name,t.description,t.created,t.status))}))}newTicketForm(){document.querySelector(".add_button").addEventListener("click",(()=>{this.addTicketForm.classList.remove("form_visible")})),document.querySelector(".cancel_addform_button").addEventListener("click",(()=>{this.addTicketForm.classList.add("form_visible")})),document.querySelector(".ok_addform_button").addEventListener("click",(()=>{this.addTicket()}))}viewNewTicket(t){document.querySelector(".tickets_container").insertAdjacentHTML("beforeend",(new e).ticketMarking(t.id,t.name,t.description,t.created,t.status));const i=document.querySelector(".tickets_container").lastElementChild;this.changeTicketStatus(i.querySelector(".ticket_status")),this.getTicketDescription(i.querySelector(".ticket_name")),this.updateTicket(i.querySelector(".ticket_edit_button")),this.deleteTicket(i.querySelector(".ticket_delete_button"))}addTicket(){const t=document.getElementById("ticket_name").value,e=document.getElementById("ticket_description").value;this.ticketService.create({name:`${t}`,description:`${e}`,status:!1},this.viewNewTicket),this.addTicketForm.classList.add("form_visible")}changeTicketStatus(e){e.addEventListener("click",(e=>{const i=e.target.closest(".ticket").id;e.target.checked?(new t).update(i,{status:!0}):(new t).update(i,{status:!1})}))}changeAllTicketsStatus(){setTimeout((()=>{document.querySelectorAll(".ticket_status").forEach((t=>{this.changeTicketStatus(t)}))}),10)}getTicketDescription(e){e.addEventListener("click",(e=>{(new t).get(e.target.closest(".ticket").id,(()=>{e.target.closest(".ticket").firstElementChild.nextElementSibling.lastElementChild.classList.toggle("description_visible")}))}))}getAllTicketsDescription(){setTimeout((()=>{document.querySelectorAll(".ticket_text").forEach((t=>{this.getTicketDescription(t)}))}),10)}viewChanges(t,e){const i=document.getElementById(`${t}`);console.log(e),console.log(t),e.forEach((e=>{t===e.id&&(i.querySelector(".ticket_name").textContent=e.name,i.querySelector(".ticket_description").textContent=e.description)}))}updateTicket(e){const i=document.querySelector(".update_ticket_form"),c=document.getElementById("update_ticket_name"),s=document.getElementById("update_ticket_description");e.addEventListener("click",(t=>{const e=t.target.closest(".ticket");i.classList.remove("form_visible"),i.dataset.id=e.id,c.value=e.firstElementChild.nextElementSibling.firstElementChild.textContent,s.value=e.firstElementChild.nextElementSibling.lastElementChild.textContent})),document.querySelector(".ok_updateform_button").addEventListener("click",(()=>{(new t).update(i.dataset.id,{name:`${c.value}`,description:`${s.value}`},this.viewChanges),i.classList.add("form_visible")})),document.querySelector(".cancel_updateform_button").addEventListener("click",(()=>{i.classList.add("form_visible")}))}updateAllTickets(){setTimeout((()=>{document.querySelectorAll(".ticket_edit_button").forEach((t=>{this.updateTicket(t)}))}),10)}deleteTicket(e){e.addEventListener("click",(e=>{(new t).delete(e.target.closest(".ticket").id,(()=>{e.target.closest(".ticket").remove()}))}))}deleteAllTickets(){setTimeout((()=>{document.querySelectorAll(".ticket_delete_button").forEach((t=>{this.deleteTicket(t)}))}),10)}}(i).init()})();